import os
import requests
import shutil
from datetime import date
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler

# 環境変数からトークンとシークレットを取得　定義しておく
SLACK_BOT_TOKEN = os.environ["SLACK_BOT_TOKEN"]
SLACK_APP_TOKEN = os.environ["SLACK_APP_TOKEN"]
SLACK_SIGNING_SECRET = os.environ["SLACK_SIGNING_SECRET"]

# ボットのインスタンスを作成
app = App(token=SLACK_BOT_TOKEN, signing_secret=SLACK_SIGNING_SECRET)

# 画像ファイルを保存するディレクトリ
DOWNLOAD_DIR = "./FolderName/"  # ダウンロードディレクトリのパスを指定

# 同じ日にダウンロードしたファイルに連番を付ける関数
def get_unique_filename(base_path, filename):
    date_str = date.today().isoformat()
    base, ext = os.path.splitext(filename)
    counter = 1
    new_filename = f"{date_str}_{base}{ext}"
    while os.path.exists(os.path.join(base_path, new_filename)):
        new_filename = f"{date_str}_{base}-{counter}{ext}"
        counter += 1
    return new_filename

@app.event("message")
def handle_message_events(event, say):
    if 'files' not in event:  # ファイルかどうか判断
        print('Not a file....')
        return

    for file in event['files']:
        if file['mimetype'].startswith('image/'):
            url = file['url_private']  # 画像のURLを取得
            filename = file['name']  # 元のファイル名を取得
            print(url)
            resp = requests.get(url, headers={'Authorization': f'Bearer {SLACK_BOT_TOKEN}'}, stream=True)
            if resp.status_code == 200:
                unique_filename = get_unique_filename(DOWNLOAD_DIR, filename)
                location = os.path.join(DOWNLOAD_DIR, unique_filename)
                with open(location, "wb") as f:
                    for chunk in resp.iter_content(chunk_size=8192):
                        f.write(chunk)
                print(f"Downloaded {filename} to {location}")
                say(f'画像ファイルをダウンロードしました: {unique_filename}')
            else:
                print(f"Failed to download {url}. Status code: {resp.status_code}")

# Socket Modeを使用してアプリを開始
if __name__ == "__main__":
    handler = SocketModeHandler(app, SLACK_APP_TOKEN)
    handler.start()
